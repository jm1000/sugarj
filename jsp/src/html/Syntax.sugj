package html;
 
import org.sugarj.languages.Plain;
  
public sugar Syntax { 

sorts Document Element HtmlContent
  context-free syntax
    Prologue Element Epilogue -> Document {cons("Document")}
    Element -> HtmlContent
    DocTypeDecl -> HtmlContent {cons("DocTypeDec")}
    %% HTMLComment -> HtmlContent {cons("Comment")}    
    HTMLComment -> HtmlContent{cons("Comment")}   
    
%% module html-prolog
  context-free syntax
    HTMLDecl? Misc* DocTypePrologue? -> Prologue {cons("Prologue")}
    Misc* -> Epilogue {cons("Epilogue")}
    HTMLComment -> Misc {cons("Comment")}

  context-free syntax
  "<!DOCTYPE" -> DocTypeLeft
	"html"			-> RootElement
	"PUBLIC"		-> OtherInfo
	"SYSTEM"		-> OtherInfo
	DocTypeLeft RootElement OtherInfo  URI* ">"	-> DocTypeDecl {cons("DocTypeDecl")}
    DocTypeDecl Misc* -> DocTypePrologue {cons("DocTypePrologue")}

  syntax
    CharData      -> <HtmlContent-CF> {cons("HtmlText")}

  context-free syntax
  	"<" ElemName Attribute* "/>" 	-> Element {cons("EmptyElement")}
   	"<" ElemName Attribute* ">" 		-> Element {cons("EmptyElement")}
    "<" ElemName Attribute* ">" HtmlContent* "</" ElemName ">"    	-> Element {cons("Element")}
	  NCName01 -> ElemName {cons("ElemName")}
      
  //context-free syntax
    //HTMLTagStart ElemName Attribute* HTMLSlashTagEnd 	-> Element {cons("EmptyElement")}
    //HTMLTagStart ElemName Attribute* HTMLTagEnd 		-> Element {cons("EmptyElement")}
    //HTMLTagStart ElemName Attribute* HTMLTagEnd HtmlContent* HTMLSlashTagStart ElemName HTMLTagEnd    	-> Element {cons("Element")}
	//NCName -> ElemName {cons("ElemName")}
     
  lexical syntax
    [A-Za-z\_] [A-Za-z0-9\.\-\_]* 		-> EName
    "<"			-> HTMLTagStart
    ">"			-> HTMLTagEnd
	"</"		-> HTMLSlashTagStart
	"/>"		-> HTMLSlashTagEnd
	
  lexical restrictions
    EName -/- [A-Za-z0-9\.\-\_]
    HTMLTagStart -/- [\%\!]
    
  context-free syntax
    AttrName "=" AttValue 	-> Attribute {cons("Attribute")}
    NCName02 -> AttrName {cons("AttrName")}

  syntax
    DoubleQuotedStm -> <URI-CF> {cons("URI")}

  syntax
    "\"" DoubleQuotedPart* "\"" -> DoubleQuotedStm
    "\"" DoubleQuotedPart* "\"" -> <AttValue-CF> {cons("DoubleQuoted")}
    "'"  SingleQuotedPart* "'" -> <AttValue-CF> {cons("SingleQuoted")}
    <DoubleQuotedText-LEX> -> DoubleQuotedPart {cons("CharDataPart")}
    <SingleQuotedText-LEX> -> SingleQuotedPart {cons("CharDataPart")} 
    Ref -> DoubleQuotedPart
    Ref -> SingleQuotedPart
    
  lexical syntax
    ~[\&\<\"]+ -> DoubleQuotedText
    ~[\&\<\']+ -> SingleQuotedText
    [A-Za-z\_] [A-Za-z0-9\.\-\_]* -> AName
    
  lexical restrictions
    DoubleQuotedText -/- ~[\&\<\"]
    SingleQuotedText -/- ~[\&\<\']
    AName -/- [A-Za-z0-9\.\-\_]

%% module hmtl-text
  lexical syntax
    [\ \t\n\13] -> WhiteSpaceChar

  syntax
    CharDataPart+ 					-> CharData {cons("Text")}
    FooCharDataText 				-> CharDataPart {cons("CharDataPart")}
    Ref 							-> CharDataPart
    <CharDataText-LEX> 				-> FooCharDataText
    "&"   <NCName03-LEX>   ";" -> EntityRef  {cons("EntityRef")}
    CharRef    -> Ref
    EntityRef  -> Ref

  syntax restrictions
    CharData -/- [\&] | ~[\<\&]

  lexical syntax
    ~[\<\&]+ -> CharDataText

  lexical restrictions
    CharDataToken    -/- ~[\<\]\ \t\n\13]
    CharDataText -/- ~[\<\&]

%% module html-names
  lexical syntax
    [A-Za-z\_] [A-Za-z0-9\.\-\_]* -> NCName01
    [A-Za-z\_] [A-Za-z0-9\.\-\_]* -> NCName02
    [A-Za-z\_] [A-Za-z0-9\.\-\_]* -> NCName03

  lexical restrictions
    NCName01 -/- [A-Za-z0-9\.\-\_]
    NCName02 -/- [A-Za-z0-9\.\-\_]
    NCName03 -/- [A-Za-z0-9\.\-\_]



%% module html-comments
  lexical syntax
     "<!--" -> CommentLeft
     "-->" -> CommentRight
     CommentLeft CommentContent* CommentRight -> HTMLComment
    Dash -> CommentContent
    ~[\-] -> CommentContent
    "-" -> Dash

  lexical restrictions
    Dash -/- [\-]
}
